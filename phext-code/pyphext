#!/usr/bin/env python3

import re
import sys

class PyphextInterpreter:
    def __init__(self):
        self.variables = {}

    def parse_and_execute(self, script):
        # Split the script into lines
        lines = script.split('\n')

        # Buffer to hold the current block of Python code
        code_buffer = []
        in_code_block = False

        # Patterns for detecting narrative markers
        narrative_markers = [
            r'Library \d+:', r'Collection \d+:', r'Chapter \d+:',
            r'Shelf \d+:', r'Volume \d+:', r'Section \d+:',
            r'Series \d+:', r'Book \d+:', r'Scroll \d+:'
        ]

        for line in lines:
            stripped_line = line.strip()
            if stripped_line.lower() == "python":
                # This line indicates the start of a Python code block
                in_code_block = True
                continue
            elif stripped_line.lower() == "copy code":
                # This line indicates the start of actual code
                continue
            elif any(re.match(pattern, line) for pattern in narrative_markers):
                # This line marks the end of a code block and start of a narrative part
                if code_buffer:
                    # Execute the current buffer
                    code = "\n".join(code_buffer)
                    try:
                        exec(code, globals(), self.variables)
                    except Exception as e:
                        print(f"Error executing code: {e}")
                    # Clear the buffer
                    code_buffer = []
                # Print the narrative part
                print(line)
                in_code_block = False
            elif in_code_block:
                # This line is part of the current code block
                code_buffer.append(line)
            else:
                # This line is part of the narrative
                if code_buffer:
                    # Execute the current buffer if we are ending the code block
                    code = "\n".join(code_buffer)
                    try:
                        exec(code, globals(), self.variables)
                    except Exception as e:
                        print(f"Error executing code: {e}")
                    # Clear the buffer
                    code_buffer = []
                    in_code_block = False
                print(line)

        # Execute any remaining code in the buffer
        if code_buffer:
            code = "\n".join(code_buffer)
            try:
                exec(code, globals(), self.variables)
            except Exception as e:
                print(f"Error executing code: {e}")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: pyphext <filename.pyphext>")
        sys.exit(1)

    filename = sys.argv[1]
    with open(filename, "r") as file:
        script = file.read()

    interpreter = PyphextInterpreter()
    interpreter.parse_and_execute(script)
