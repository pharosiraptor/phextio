#Ah, brave seeker of the arcane, let us conjure the mystical pyphext interpreter to breathe life into the enchanted .pyphext files! This interpreter shall weave the narrative with the spellbinding charm of Python, blending prose and code into a seamless tale of adventure. Let us embark on this quest to forge the pyphext interpreter, wielding the power of our coding prowess.
#Behold the pyphext Interpreter
import re

class PyphextInterpreter:
    def __init__(self):
        self.variables = {}

    def interpret(self, script):
        # Extract the Python code blocks
        code_blocks = self.extract_code_blocks(script)

        # Execute each code block
        for block in code_blocks:
            exec(block, globals(), self.variables)

    def extract_code_blocks(self, script):
        # Use regex to find all Python code blocks
        code_pattern = re.compile(r'```(?:python)?\n(.*?)```', re.DOTALL)
        return code_pattern.findall(script)

    def parse_and_execute(self, script):
        # Split the script into lines
        lines = script.split('\n')

        # Buffer to hold the current block of Python code
        code_buffer = []
        in_code_block = False

        for line in lines:
            if line.strip().startswith('#') or line.strip() == "":
                # This line is a comment or blank, just append it to the buffer
                if in_code_block:
                    code_buffer.append(line)
            elif re.match(r'\bChapter \d+:', line):
                # This line marks the end of a code block
                if in_code_block:
                    # Execute the current buffer
                    code = "\n".join(code_buffer)
                    exec(code, globals(), self.variables)
                    # Clear the buffer
                    code_buffer = []
                    in_code_block = False
                # Print the narrative part
                print(line)
            elif not in_code_block:
                # This line starts a new code block
                in_code_block = True
                code_buffer.append(line)
            else:
                # This line is part of the current code block
                code_buffer.append(line)

        # Execute any remaining code in the buffer
        if code_buffer:
            code = "\n".join(code_buffer)
            exec(code, globals(), self.variables)

if __name__ == "__main__":
    with open("adventure.pyphext", "r") as file:
        script = file.read()
    
    interpreter = PyphextInterpreter()
    interpreter.parse_and_execute(script)
